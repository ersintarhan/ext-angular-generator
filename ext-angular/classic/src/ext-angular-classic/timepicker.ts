import {Component,ViewChild,ElementRef,ComponentFactoryResolver,ViewContainerRef,forwardRef,ContentChildren,QueryList} from '@angular/core';
import { base } from './base';
// Ext Class - Ext.picker.Time
export class timepickerMetaData {
	public static XTYPE: string = 'timepicker';
	public static INPUTNAMES: string[] = [
		'activeCounter',
		'alignOnScroll',
		'alignTarget',
		'alwaysOnTop',
		'anchor',
		'animateShadow',
		'ariaAttributes',
		'ariaDescribedBy',
		'ariaLabel',
		'ariaLabelledBy',
		'autoEl',
		'autoRender',
		'autoScroll',
		'autoShow',
		'baseCls',
		'bind',
		'blockRefresh',
		'border',
		'childEls',
		'cls',
		'columnWidth',
		'componentCls',
		'componentLayout',
		'constrain',
		'constraintInsets',
		'constrainTo',
		'contentEl',
		'controller',
		'data',
		'defaultAlign',
		'defaultListenerScope',
		'deferEmptyText',
		'deferInitialRefresh',
		'disabled',
		'disabledCls',
		'disableSelection',
		'displayField',
		'dock',
		'draggable',
		'emptyText',
		'fixed',
		'flex',
		'floating',
		'focusCls',
		'focusOnToFront',
		'format',
		'formBind',
		'frame',
		'height',
		'hidden',
		'hideMode',
		'html',
		'id',
		'increment',
		'itemCls',
		'itemId',
		'itemSelector',
		'itemTpl',
		'keyMap',
		'keyMapEnabled',
		'keyMapTarget',
		'liquidLayout',
		'listeners',
		'liveDrag',
		'loader',
		'loadingCls',
		'loadingHeight',
		'loadingText',
		'loadingUseMsg',
		'loadMask',
		'margin',
		'maskDefaults',
		'maskElement',
		'maxHeight',
		'maxValue',
		'maxWidth',
		'minHeight',
		'minValue',
		'minWidth',
		'modal',
		'modelValidation',
		'multiSelect',
		'nameable',
		'navigationModel',
		'overCls',
		'overflowX',
		'overflowY',
		'overItemCls',
		'padding',
		'pageSize',
		'plugins',
		'preserveScrollOnRefresh',
		'preserveScrollOnReload',
		'publishes',
		'reference',
		'region',
		'renderConfig',
		'renderData',
		'renderSelectors',
		'renderTo',
		'renderTpl',
		'resizable',
		'resizeHandles',
		'saveDelay',
		'scrollable',
		'selectedItemCls',
		'selection',
		'selectionModel',
		'session',
		'shadow',
		'shadowOffset',
		'shareableName',
		'shim',
		'shrinkWrap',
		'simpleSelect',
		'singleSelect',
		'stateEvents',
		'stateful',
		'stateId',
		'store',
		'style',
		'tabIndex',
		'throttledUpdate',
		'toFrontOnShow',
		'touchAction',
		'tpl',
		'tplWriteMode',
		'trackOver',
		'twoWayBindable',
		'ui',
		'uiCls',
		'userCls',
		'viewModel',
		'weight',
		'width',
		'xtype',
		'flex',
		'platformConfig',
		'responsiveConfig',
		'fitToParent',
		'config'
];
	public static OUTPUTS: any[] = [
		{name:'activate',parameters:'timepicker'},
		{name:'added',parameters:'timepicker,container,pos'},
		{name:'afterlayoutanimation',parameters:'timepicker'},
		{name:'afterrender',parameters:'timepicker'},
		{name:'beforeactivate',parameters:'timepicker'},
		{name:'beforecontainerclick',parameters:'timepicker,e'},
		{name:'beforecontainercontextmenu',parameters:'timepicker,e'},
		{name:'beforecontainerdblclick',parameters:'timepicker,e'},
		{name:'beforecontainerkeydown',parameters:'timepicker,e'},
		{name:'beforecontainerkeypress',parameters:'timepicker,e'},
		{name:'beforecontainerkeyup',parameters:'timepicker,e'},
		{name:'beforecontainermousedown',parameters:'timepicker,e'},
		{name:'beforecontainermouseout',parameters:'timepicker,e'},
		{name:'beforecontainermouseover',parameters:'timepicker,e'},
		{name:'beforecontainermouseup',parameters:'timepicker,e'},
		{name:'beforedeactivate',parameters:'timepicker'},
		{name:'beforedeselect',parameters:'timepicker,record,index'},
		{name:'beforedestroy',parameters:'timepicker'},
		{name:'beforehide',parameters:'timepicker'},
		{name:'beforeitemclick',parameters:'timepicker,record,item,index,e'},
		{name:'beforeitemcontextmenu',parameters:'timepicker,record,item,index,e'},
		{name:'beforeitemdblclick',parameters:'timepicker,record,item,index,e'},
		{name:'beforeitemkeydown',parameters:'timepicker,record,item,index,e'},
		{name:'beforeitemkeypress',parameters:'timepicker,record,item,index,e'},
		{name:'beforeitemkeyup',parameters:'timepicker,record,item,index,e'},
		{name:'beforeitemlongpress',parameters:'timepicker,record,item,index,e'},
		{name:'beforeitemmousedown',parameters:'timepicker,record,item,index,e'},
		{name:'beforeitemmouseenter',parameters:'timepicker,record,item,index,e'},
		{name:'beforeitemmouseleave',parameters:'timepicker,record,item,index,e'},
		{name:'beforeitemmouseup',parameters:'timepicker,record,item,index,e'},
		{name:'beforerefresh',parameters:'timepicker'},
		{name:'beforerender',parameters:'timepicker'},
		{name:'beforeselect',parameters:'timepicker,record,index'},
		{name:'beforeshow',parameters:'timepicker'},
		{name:'beforestaterestore',parameters:'timepicker,state'},
		{name:'beforestatesave',parameters:'timepicker,state'},
		{name:'blur',parameters:'timepicker,event'},
		{name:'boxready',parameters:'timepicker,width,height'},
		{name:'containerclick',parameters:'timepicker,e'},
		{name:'containercontextmenu',parameters:'timepicker,e'},
		{name:'containerdblclick',parameters:'timepicker,e'},
		{name:'containerkeydown',parameters:'timepicker,e'},
		{name:'containerkeypress',parameters:'timepicker,e'},
		{name:'containerkeyup',parameters:'timepicker,e'},
		{name:'containermousedown',parameters:'timepicker,e'},
		{name:'containermouseout',parameters:'timepicker,e'},
		{name:'containermouseover',parameters:'timepicker,e'},
		{name:'containermouseup',parameters:'timepicker,e'},
		{name:'deactivate',parameters:'timepicker'},
		{name:'deselect',parameters:'timepicker,record'},
		{name:'destroy',parameters:'timepicker'},
		{name:'disable',parameters:'timepicker'},
		{name:'enable',parameters:'timepicker'},
		{name:'focus',parameters:'timepicker,event'},
		{name:'focuschange',parameters:'timepicker,oldFocused,newFocused'},
		{name:'focusenter',parameters:'timepicker,event'},
		{name:'focusleave',parameters:'timepicker,event'},
		{name:'hide',parameters:'timepicker'},
		{name:'highlightitem',parameters:'view,node'},
		{name:'itemadd',parameters:'records,index,node,view'},
		{name:'itemclick',parameters:'timepicker,record,item,index,e'},
		{name:'itemcontextmenu',parameters:'timepicker,record,item,index,e'},
		{name:'itemdblclick',parameters:'timepicker,record,item,index,e'},
		{name:'itemkeydown',parameters:'timepicker,record,item,index,e'},
		{name:'itemkeypress',parameters:'timepicker,record,item,index,e'},
		{name:'itemkeyup',parameters:'timepicker,record,item,index,e'},
		{name:'itemlongpress',parameters:'timepicker,record,item,index,e'},
		{name:'itemmousedown',parameters:'timepicker,record,item,index,e'},
		{name:'itemmouseenter',parameters:'timepicker,record,item,index,e'},
		{name:'itemmouseleave',parameters:'timepicker,record,item,index,e'},
		{name:'itemmouseup',parameters:'timepicker,record,item,index,e'},
		{name:'itemremove',parameters:'records,index,item,view'},
		{name:'itemupdate',parameters:'record,index,node,view'},
		{name:'move',parameters:'timepicker,x,y'},
		{name:'refresh',parameters:'timepicker'},
		{name:'removed',parameters:'timepicker,ownerCt'},
		{name:'render',parameters:'timepicker'},
		{name:'resize',parameters:'timepicker,width,height,oldWidth,oldHeight'},
		{name:'select',parameters:'timepicker,record,index'},
		{name:'selectionchange',parameters:'timepicker,selected'},
		{name:'show',parameters:'timepicker'},
		{name:'staterestore',parameters:'timepicker,state'},
		{name:'statesave',parameters:'timepicker,state'},
		{name:'unhighlightitem',parameters:'view,node'},
		{name:'viewready',parameters:'timepicker'},
		{name:'ready',parameters:''}
];
	public static OUTPUTNAMES: string[] = [
		'activate',
		'added',
		'afterlayoutanimation',
		'afterrender',
		'beforeactivate',
		'beforecontainerclick',
		'beforecontainercontextmenu',
		'beforecontainerdblclick',
		'beforecontainerkeydown',
		'beforecontainerkeypress',
		'beforecontainerkeyup',
		'beforecontainermousedown',
		'beforecontainermouseout',
		'beforecontainermouseover',
		'beforecontainermouseup',
		'beforedeactivate',
		'beforedeselect',
		'beforedestroy',
		'beforehide',
		'beforeitemclick',
		'beforeitemcontextmenu',
		'beforeitemdblclick',
		'beforeitemkeydown',
		'beforeitemkeypress',
		'beforeitemkeyup',
		'beforeitemlongpress',
		'beforeitemmousedown',
		'beforeitemmouseenter',
		'beforeitemmouseleave',
		'beforeitemmouseup',
		'beforerefresh',
		'beforerender',
		'beforeselect',
		'beforeshow',
		'beforestaterestore',
		'beforestatesave',
		'blur',
		'boxready',
		'containerclick',
		'containercontextmenu',
		'containerdblclick',
		'containerkeydown',
		'containerkeypress',
		'containerkeyup',
		'containermousedown',
		'containermouseout',
		'containermouseover',
		'containermouseup',
		'deactivate',
		'deselect',
		'destroy',
		'disable',
		'enable',
		'focus',
		'focuschange',
		'focusenter',
		'focusleave',
		'hide',
		'highlightitem',
		'itemadd',
		'itemclick',
		'itemcontextmenu',
		'itemdblclick',
		'itemkeydown',
		'itemkeypress',
		'itemkeyup',
		'itemlongpress',
		'itemmousedown',
		'itemmouseenter',
		'itemmouseleave',
		'itemmouseup',
		'itemremove',
		'itemupdate',
		'move',
		'refresh',
		'removed',
		'render',
		'resize',
		'select',
		'selectionchange',
		'show',
		'staterestore',
		'statesave',
		'unhighlightitem',
		'viewready',
		'ready'
];
}
@Component({
  selector: timepickerMetaData.XTYPE,
	inputs: timepickerMetaData.INPUTNAMES,
	outputs: timepickerMetaData.OUTPUTNAMES,
	providers: [{provide: base, useExisting: forwardRef(() => timepicker)}],
	template: '<ng-template #dynamic></ng-template>'
})
export class timepicker extends base {
	constructor(eRef:ElementRef,resolver:ComponentFactoryResolver,vcRef:ViewContainerRef) {
		super(eRef,resolver,vcRef,timepickerMetaData);
	}
	//@ContentChildren(base,{read:ViewContainerRef}) extbaseRef:QueryList<ViewContainerRef>;
	@ContentChildren(base,{read: base}) extbaseRef: QueryList<base>;
	@ViewChild('dynamic',{read:ViewContainerRef}) dynamicRef:ViewContainerRef;
	ngAfterContentInit() {this.AfterContentInit(this.extbaseRef);}
	ngOnInit() {this.OnInit(this.dynamicRef,timepickerMetaData);}
}
